{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"","text":""},{"location":"lab1/configuration/","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<ul> <li><code>models</code> - \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</li> <li><code>user_endpoints</code> - CRUD \u043c\u043e\u0434\u0435\u043b\u0435\u0439</li> <li><code>user_endpoints</code> - \u041f\u0443\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u044e\u0437\u0435\u0440\u043e\u043c.</li> <li><code>main</code> - \u0437\u0430\u043f\u0443\u0441\u043a \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> </ul>"},{"location":"lab1/endpoints/","title":"CRUD \u044d\u043d\u0434\u0440\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>import datetime\nfrom fastapi import APIRouter, HTTPException\nfrom fastapi import Depends\nfrom schemas import (Salary, SalaryDB, SalaryDisplay,SalaryPeriod, SalaryPeriodDisplay, SalaryPeriodDB,\n                     SalaryPeriodForUser, SalaryPeriodForUserDB, SalaryPeriodForUserDisplay,\n                     WasteDB, WasteDisplay, Waste, WastePeriodDisplay, WastePeriodDB, WastePeriod,\n                     WastePeriodForUser, WastePeriodForUserDB, WastePeriodForUserDisplay)\n\nfrom db import get_session\nfrom typing_extensions import TypedDict\n\nlogic_router = APIRouter()\n\n\n@logic_router.post(\"/waste_period_for_user-create\")\ndef wp_user_create(wp_user: WastePeriodForUserDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": WastePeriodForUser}):\n    wp_user = WastePeriodForUser.model_validate(wp_user)\n    session.add(wp_user)\n    session.commit()\n    session.refresh(wp_user)\n    return {\"status\": 200, \"data\": wp_user}\n\n@logic_router.get(\"/list-waste_period_for_user\")\ndef wp_users_list(session=Depends(get_session)) -&gt; list[WastePeriodForUser]:\n    return session.query(WastePeriodForUser).all()\n\n\n@logic_router.get(\"/waste_period_for_user/{wp_user_id}\",  response_model=WastePeriodForUserDisplay)\ndef wp_user_get(wp_user_id: int, session=Depends(get_session)):\n    obj = session.get(WastePeriodForUser, wp_user_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"waste period not found\")\n    return obj\n\n\n@logic_router.patch(\"/waste_period_for_user/update/{wp_user_id}\")\ndef wp_user_update(wp_user_id: int, wp_user: WastePeriodForUserDB, session=Depends(get_session)) -&gt; \\\n        WastePeriodForUser:\n    db_wp_user = session.get(WastePeriodForUser, wp_user_id)\n    if not db_wp_user:\n        raise HTTPException(status_code=404, detail=\"waste period not found\")\n\n    wp_user_data = wp_user.model_dump(exclude_unset=True)\n    for key, value in wp_user_data.items():\n        setattr(db_wp_user, key, value)\n    session.add(db_wp_user)\n    session.commit()\n    session.refresh(db_wp_user)\n    return db_wp_user\n\n\n@logic_router.delete(\"/waste_period_for_user/delete/{wp_user_id}\")\ndef wp_user_delete(wp_user_id: int, session=Depends(get_session)):\n    wp_user = session.get(WastePeriodForUser, wp_user_id)\n    if not wp_user:\n        raise HTTPException(status_code=404, detail=\"wp_user not found\")\n    session.delete(wp_user)\n    session.commit()\n    return {\"ok\": True}\n\n#########\n\n@logic_router.post(\"/salary_period_for_user-create\")\ndef sp_user_create(sp_user: SalaryPeriodForUserDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": SalaryPeriodForUser}):\n    sp_user = SalaryPeriodForUser.model_validate(sp_user)\n    session.add(sp_user)\n    session.commit()\n    session.refresh(sp_user)\n    return {\"status\": 200, \"data\": sp_user}\n\n\n@logic_router.get(\"/list-salary_period_for_user\")\ndef sp_users_list(session=Depends(get_session)) -&gt; list[SalaryPeriodForUser]:\n    return session.query(SalaryPeriodForUser).all()\n\n\n@logic_router.get(\"/salary_period_for_user/{sp_user_id}\",  response_model=SalaryPeriodForUserDisplay)\ndef sp_user_get(sp_user_id: int, session=Depends(get_session)):\n    obj = session.get(SalaryPeriodForUser, sp_user_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"salary period not found\")\n    return obj\n\n\n@logic_router.patch(\"/salary_period_for_user/update/{sp_user_id}\")\ndef sp_user_update(sp_user_id: int, sp_user: SalaryPeriodForUserDB, session=Depends(get_session)) -&gt; \\\n        SalaryPeriodForUser:\n    db_sp_user = session.get(SalaryPeriodForUser, sp_user_id)\n    if not db_sp_user:\n        raise HTTPException(status_code=404, detail=\"salary period not found\")\n\n    sp_user_data = sp_user.model_dump(exclude_unset=True)\n    for key, value in sp_user_data.items():\n        setattr(db_sp_user, key, value)\n    session.add(db_sp_user)\n    session.commit()\n    session.refresh(db_sp_user)\n    return db_sp_user\n\n\n@logic_router.delete(\"/salary_period_for_user/delete/{sp_user_id}\")\ndef sp_user_delete(sp_user_id: int, session=Depends(get_session)):\n    sp_user = session.get(SalaryPeriodForUser, sp_user_id)\n    if not sp_user:\n        raise HTTPException(status_code=404, detail=\"sp_user not found\")\n    session.delete(sp_user)\n    session.commit()\n    return {\"ok\": True}\n\n\n########\n\n@logic_router.post(\"/waste_period-create\")\ndef waste_period_create(period: WastePeriodDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": WastePeriod}):\n    period = WastePeriod.model_validate(period)\n    session.add(period)\n    session.commit()\n    session.refresh(period)\n    return {\"status\": 200, \"data\": period}\n\n\n@logic_router.get(\"/list-waste_period\")\ndef waste_periods_list(session=Depends(get_session)) -&gt; list[WastePeriod]:\n    return session.query(WastePeriod).all()\n\n\n@logic_router.get(\"/waste_period/{period_id}\",  response_model=WastePeriodDisplay)\ndef waste_period_get(period_id: int, session=Depends(get_session)):\n    obj = session.get(WastePeriod, period_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"subperiod not found\")\n    return obj\n\n\n@logic_router.patch(\"/waste_period/update/{period_id}\")\ndef waste_period_update(period_id: int, period: WastePeriodDB, session=Depends(get_session)) -&gt; WastePeriod:\n    db_period = session.get(period, period_id)\n    if not db_period:\n        raise HTTPException(status_code=404, detail=\"period not found\")\n\n    period_data = period.model_dump(exclude_unset=True)\n    for key, value in period_data.items():\n        setattr(db_period, key, value)\n    session.add(db_period)\n    session.commit()\n    session.refresh(db_period)\n    return db_period\n\n\n@logic_router.delete(\"/waste_period/delete/{period_id}\")\ndef waste_period_delete(period_id: int, session=Depends(get_session)):\n    period = session.get(WastePeriod, period_id)\n    if not period:\n        raise HTTPException(status_code=404, detail=\"period not found\")\n    session.delete(period)\n    session.commit()\n    return {\"ok\": True}\n\n########\n\n@logic_router.post(\"/salary_period-create\")\ndef salary_period_create(period: SalaryPeriodDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": SalaryPeriod}):\n    period = SalaryPeriod.model_validate(period)\n    session.add(period)\n    session.commit()\n    session.refresh(period)\n    return {\"status\": 200, \"data\": period}\n\n\n@logic_router.get(\"/list-salary_period\")\ndef salary_periods_list(session=Depends(get_session)) -&gt; list[SalaryPeriod]:\n    return session.query(SalaryPeriod).all()\n\n\n@logic_router.get(\"/salary_period/{period_id}\",  response_model=SalaryPeriodDisplay)\ndef salary_period_get(period_id: int, session=Depends(get_session)):\n    obj = session.get(SalaryPeriod, period_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"subperiod not found\")\n    return obj\n\n\n@logic_router.patch(\"/salary_period/update/{period_id}\")\ndef salary_period_update(period_id: int, period: SalaryPeriodDB, session=Depends(get_session)) -&gt; SalaryPeriod:\n    db_period = session.get(period, period_id)\n    if not db_period:\n        raise HTTPException(status_code=404, detail=\"period not found\")\n\n    period_data = period.model_dump(exclude_unset=True)\n    for key, value in period_data.items():\n        setattr(db_period, key, value)\n    session.add(db_period)\n    session.commit()\n    session.refresh(db_period)\n    return db_period\n\n\n@logic_router.delete(\"/salary_period/delete/{period_id}\")\ndef salary_period_delete(period_id: int, session=Depends(get_session)):\n    period = session.get(SalaryPeriod, period_id)\n    if not period:\n        raise HTTPException(status_code=404, detail=\"period not found\")\n    session.delete(period)\n    session.commit()\n    return {\"ok\": True}\n\n###############\n\n@logic_router.post(\"/waste-create\")\ndef waste_create(input_data: WasteDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": Waste}):\n\n    date = datetime.datetime.now()\n    waste = Waste(type=input_data.type, date=date, value=input_data.value,\n                  waste_period_for_user_id=input_data.waste_period_for_user_id)\n    session.add(waste)\n    session.commit()\n    session.refresh(waste)\n\n    return {\"status\": 200, \"data\": waste}\n\n\n@logic_router.get(\"/list-wastes\")\ndef wastes_list(session=Depends(get_session)) -&gt; list[Waste]:\n    return session.query(Waste).all()\n\n\n@logic_router.get(\"/waste/{waste_id}\",  response_model=WasteDisplay)\ndef waste_get(waste_id: int, session=Depends(get_session)):\n    obj = session.get(Waste, waste_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"waste not found\")\n    return obj\n\n\n@logic_router.patch(\"/waste/update/{waste_id}\")\ndef waste_update(waste_id: int, waste: WasteDB, session=Depends(get_session)) -&gt; Waste:\n    db_waste = session.get(waste, waste_id)\n    if not db_waste:\n        raise HTTPException(status_code=404, detail=\"waste not found\")\n\n    waste_data = waste.model_dump(exclude_unset=True)\n    for key, value in waste_data.items():\n        setattr(db_waste, key, value)\n    session.add(db_waste)\n    session.commit()\n    session.refresh(db_waste)\n    return db_waste\n\n\n@logic_router.delete(\"/waste/delete/{waste_id}\")\ndef waste_delete(waste_id: int, session=Depends(get_session)):\n    waste = session.get(Waste, waste_id)\n    if not waste:\n        raise HTTPException(status_code=404, detail=\"waste not found\")\n    session.delete(waste)\n    session.commit()\n    return {\"ok\": True}\n\n#########\n\n@logic_router.post(\"/salary-create\")\ndef salary_create(input_data: SalaryDB, session=Depends(get_session)) \\\n        -&gt; TypedDict('Response', {\"status\": int,\n                                  \"data\": Salary}):\n\n    date = datetime.datetime.now()\n    salary = Salary(legal=input_data.legal, salary_period_for_user_id=input_data.salary_period_for_user_id,\n                    date=date, value=input_data.value)\n    session.add(salary)\n    session.commit()\n    session.refresh(salary)\n    return {\"status\": 200, \"data\": salary}\n\n\n@logic_router.get(\"/list-salarys\")\ndef salary_list(session=Depends(get_session)) -&gt; list[Salary]:\n    return session.query(Salary).all()\n\n\n@logic_router.get(\"/salary/{salary_id}\", response_model=SalaryDisplay)\ndef salary_get(salary_id: int, session=Depends(get_session)):\n    obj = session.get(Salary, salary_id)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"salary not found\")\n    return obj\n\n\n@logic_router.patch(\"/salary/update/{salary_id}\")\ndef salary_update(salary_id: int, salary: SalaryDB, session=Depends(get_session)) -&gt; Salary:\n    db_salary = session.get(Salary, salary_id)\n    if not db_salary:\n        raise HTTPException(status_code=404, detail=\"salary not found\")\n\n    salary_data = salary.model_dump(exclude_unset=True)\n    for key, value in salary_data.items():\n        setattr(db_salary, key, value)\n    session.add(db_salary)\n    session.commit()\n    session.refresh(db_salary)\n    return db_salary\n\n\n@logic_router.delete(\"/salary/delete/{salary_id}\")\ndef salary_delete(salary_id: int, session=Depends(get_session)):\n    salary = session.get(Salary, salary_id)\n    if not salary:\n        raise HTTPException(status_code=404, detail=\"salary not found\")\n    session.delete(salary)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"lab1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0411\u0414","text":"<p>\u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:</p> <ul> <li><code>User</code> - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u0430</li> <li><code>Salary</code> - \u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430</li> <li><code>SalaryPeriod</code> - \u041f\u0435\u0440\u0438\u043e\u0434, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u044b</li> <li><code>SalaryPeriodForUser</code> - \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u044b \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430</li> <li><code>Waste</code> - \u0422\u0440\u0430\u0442\u044b</li> <li><code>WastePeriod</code> - \u041f\u0435\u0440\u0438\u043e\u0434 \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0430\u0442\u044b</li> <li><code>WastePeriodForUser</code> - \u041f\u0435\u0440\u0438\u043e\u0434 \u0442\u0440\u0430\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430</li> </ul> <p>=== \"User\"</p> <p>```Python title=\"User\" class UserBase(SQLModel):     username: str     password: str</p> <p>class UserDisplay(UserBase):     salary_periods_for_user: Optional[List[\"SalaryPeriodForUser\"]] = None     waste_periods_for_user: Optional[List[\"WastePeriodForUser\"]] = None</p> <p>class User(UserBase, table=True):     id: int = Field(default=None, primary_key=True)     salary_periods_for_user: Optional[List[\"SalaryPeriodForUser\"]] = Relationship(back_populates=\"user\",                                                    sa_relationship_kwargs={                                                        \"cascade\": \"all, delete\",                                                    }                                                    )     waste_periods_for_user: Optional[List[\"WastePeriodForUser\"]] = Relationship(back_populates=\"user\",                                                    sa_relationship_kwargs={                                                        \"cascade\": \"all, delete\",                                                    }                                                    )</p> <p>class ChangePassword(SQLModel):     old_password: str     new_password: str</p> <pre><code>\n=== \"Salary\"\n\n```Python title=\"Salary\"\nclass SalaryDB(SQLModel):\n    value: float\n    #legal: bool\n    salary_period_for_user_id: Optional[int] = Field(default=None, foreign_key=\"salaryperiodforuser.id\")\n\n\nclass SalaryDisplay(SalaryDB):\n    salary_period_for_user: Optional[\"SalaryPeriodForUser\"] = None\n\n\nclass Salary(SalaryDB, table=True):\n    id: int = Field(default=None, primary_key=True)\n    date: datetime.datetime\n    salary_period_for_user:  Optional[\"SalaryPeriodForUser\"] = Relationship(back_populates=\"salarys\")\n\n</code></pre> <p>=== \"SalaryPeriod\"</p> <p>```Python title=\"SalaryPeriod\" class SalaryPeriodDB(SQLModel):     date_start: datetime.date     date_end: datetime.date</p> <p>class SalaryPeriodDisplay(SalaryPeriodDB):     salary_period_for_users: Optional[List[\"SalaryPeriodForUser\"]] = None</p> <p>class SalaryPeriod(SalaryPeriodDB, table=True):     id: int = Field(default=None, primary_key=True)     salary_period_for_users: Optional[List[\"SalaryPeriodForUser\"]] = Relationship(back_populates=\"salary_period\")</p> <pre><code>\n=== \"SalaryPeriodForUser\"\n\n```Python title=\"SalaryPeriodForUser\"\nclass SalaryPeriodForUserDB(SQLModel):\n    salary_period_id: Optional[int] = Field(default=None, foreign_key=\"salaryperiod.id\")\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\")\n\n\nclass SalaryPeriodForUserDisplay(SalaryPeriodForUserDB):\n    salary_period: Optional[\"SalaryPeriod\"] = None\n    salarys: Optional[List[\"Salary\"]] = None\n    user: Optional[\"User\"] = None\n\n\nclass SalaryPeriodForUser(SalaryPeriodForUserDB, table=True):\n    id: int = Field(default=None, primary_key=True)\n    salary_period: Optional[\"SalaryPeriod\"] = Relationship(back_populates=\"salary_period_for_users\")\n\n    salarys: Optional[List[\"Salary\"]] = Relationship(back_populates=\"salary_period_for_user\",\n                                                   sa_relationship_kwargs={\n                                                       \"cascade\": \"all, delete\",\n                                                   }\n                                                   )\n    user:  Optional[\"User\"] = Relationship(back_populates=\"salary_periods_for_user\")\n\n</code></pre> <p>=== \"Waste\"</p> <p>```Python title=\"Waste\" class Type(Enum):     clothes = \"clothes\"     meals = \"meals\"     hobby = 'hobby'     travel = 'travel'</p> <p>class WasteDB(SQLModel):     value: float     type: Type     waste_period_for_user_id: Optional[int] = Field(default=None, foreign_key=\"wasteperiodforuser.id\")</p> <p>class WasteDisplay(WasteDB):     waste_period_for_user: Optional[\"WastePeriodForUser\"] = None</p> <p>class Waste(WasteDB, table=True):     id: int = Field(default=None, primary_key=True)     date: datetime.datetime     waste_period_for_user:  Optional[\"WastePeriodForUser\"] = Relationship(back_populates=\"wastes\")</p> <pre><code>\n=== \"WastePeriod\"\n\n```Python title=\"WastePeriod\"\nclass WastePeriodDB(SQLModel):\n    date_start: datetime.date\n    date_end: datetime.date\n\n\nclass WastePeriodDisplay(WastePeriodDB):\n    waste_period_for_users: Optional[List[\"WastePeriodForUser\"]] = None\n\n\nclass WastePeriod(WastePeriodDB, table=True):\n    id: int = Field(default=None, primary_key=True)\n    waste_period_for_users: Optional[List[\"WastePeriodForUser\"]] = Relationship(back_populates=\"waste_period\")\n\n\n</code></pre> <p>=== \"WastePeriodForUser\"</p> <p>```Python title=\"WastePeriodForUser\" class WastePeriodForUserDB(SQLModel):     limit: float     waste_period_id: Optional[int] = Field(default=None, foreign_key=\"wasteperiod.id\")     user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\")</p> <p>class WastePeriodForUserDisplay(WastePeriodForUserDB):     waste_period: Optional[\"WastePeriod\"] = None     wastes: Optional[List[\"Waste\"]] = None     user: Optional[\"User\"] = None</p> <p>class WastePeriodForUser(WastePeriodForUserDB, table=True):     id: int = Field(default=None, primary_key=True)     waste_period: Optional[\"WastePeriod\"] = Relationship(back_populates=\"waste_period_for_users\")</p> <pre><code>wastes: Optional[List[\"Waste\"]] = Relationship(back_populates=\"waste_period_for_user\",\n                                               sa_relationship_kwargs={\n                                                   \"cascade\": \"all, delete\",\n                                               }\n                                               )\nuser:  Optional[\"User\"] = Relationship(back_populates=\"waste_periods_for_user\")\n</code></pre> <p>```</p>"},{"location":"lab1/routes/","title":"\u0420\u043e\u0443\u0442\u0438\u043d\u0433","text":"<p>\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0410\u041f\u0418.</p> <p>```Python title=\"Main\"     app = FastAPI()</p> <pre><code>app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"])\napp.include_router(auth_router, prefix=\"/api/users\", tags=[\"users\"])\n</code></pre> <p>```</p>"},{"location":"lab2/task-1/","title":"Threads vs Porcess vs Async","text":"<p>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0444\u043e\u043c\u0430\u043d\u0441\u0430 cpu-bound \u0437\u0430\u0434\u0430\u0447 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 3 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432 python:</p> <ul> <li>multithreading</li> <li>multiprocessing</li> <li>async</li> </ul>"},{"location":"lab2/task-1/#multithreading","title":"multithreading","text":"<pre><code>import threading\nimport time\n\ndef calculate_partial_sum(start, end, result, index):\n    result[index] = sum(range(start, end + 1))\n\ndef calculate_sum():\n    total_threads = 4\n    n = 1000000\n    thread_list = []\n    result = [0] * total_threads\n    step = n // total_threads\n\n    for i in range(total_threads):\n        start = i * step + 1\n        end = (i + 1) * step if i != total_threads - 1 else n\n        thread = threading.Thread(target=calculate_partial_sum, args=(start, end, result, i))\n        thread_list.append(thread)\n        thread.start()\n\n    for thread in thread_list:\n        thread.join()\n\n    total_sum = sum(result)\n    return total_sum\n\nstart_time = time.time()\nsum_result = calculate_sum()\nend_time = time.time()\nprint(f\"Threading sum: {sum_result}, Time taken: {end_time - start_time} seconds\")\n</code></pre>"},{"location":"lab2/task-1/#multiprocess","title":"multiprocess","text":"<pre><code>import multiprocessing\nimport time\n\ndef calculate_partial_sum(start, end, result, index):\n    result[index] = sum(range(start, end + 1))\n\ndef calculate_sum():\n    total_processes = 4\n    n = 1000000\n    process_list = []\n    manager = multiprocessing.Manager()\n    result = manager.list([0] * total_processes)\n    step = n // total_processes\n\n    for i in range(total_processes):\n        start = i * step + 1\n        end = (i + 1) * step if i != total_processes - 1 else n\n        process = multiprocessing.Process(target=calculate_partial_sum, args=(start, end, result, i))\n        process_list.append(process)\n        process.start()\n\n    for process in process_list:\n        process.join()\n\n    total_sum = sum(result)\n    return total_sum\n\n\nif __name__ == '__main__':\n    start_time = time.time()\n    sum_result = calculate_sum()\n    end_time = time.time()\n    print(f\"Multiprocessing sum: {sum_result}, Time taken: {end_time - start_time} seconds\")\n</code></pre>"},{"location":"lab2/task-1/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\nasync def calculate_partial_sum(start, end):\n    return sum(range(start, end + 1))\n\nasync def calculate_sum():\n    total_tasks = 4\n    n = 1000000\n    step = n // total_tasks\n    tasks = []\n\n    for i in range(total_tasks):\n        start = i * step + 1\n        end = (i + 1) * step if i != total_tasks - 1 else n\n        tasks.append(asyncio.create_task(calculate_partial_sum(start, end)))\n\n    results = await asyncio.gather(*tasks)\n    total_sum = sum(results)\n    return total_sum\n\nstart_time = time.time()\nsum_result = asyncio.run(calculate_sum())\nend_time = time.time()\nprint(f\"Async sum: {sum_result}, Time taken: {end_time - start_time} seconds\")\n</code></pre>"},{"location":"lab2/task-1/#_1","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u043c\u0435\u0440\u043e\u0432","text":"<pre><code>| Solution      | Time (seconds)     |\n|---------------|--------------------|\n| Async         | 1.2993099689483643 |\n| Multiprocess  | 1.6727426052093506 |\n| Threading     | 1.244816780090332  |\n\n</code></pre>"},{"location":"lab2/task-1/#_2","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u041a\u0430\u043a \u043c\u043e\u0436\u0435\u043c \u0432\u0438\u0434\u0435\u0442\u044c, \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 python \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 multiprocess, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u0441\u0443\u0442\u0438 \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0447\u0435\u0441\u0442\u043d\u0430\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0432 python \u0438\u0437-\u0437\u0430 GIL.</p>"},{"location":"lab2/task-2/","title":"\u041f\u0430\u0441\u0438\u043d\u0433 \u0432\u0435\u0431 \u0441\u0442\u0440\u0430\u043d\u0438\u0446","text":""},{"location":"lab2/task-2/#multithreading","title":"multithreading","text":"<pre><code>from threading import Thread\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nfrom dotenv import load_dotenv\nimport random\nimport psycopg2\nimport os\n\nload_dotenv()\n\ndef save_to_database(url, title):\n    db_url = os.getenv(\"DB_URL\")\n    conn = psycopg2.connect(db_url)\n    curs = conn.cursor()\n\n    curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title))\n    conn.commit()\n\n    curs.close()\n    conn.close()\n\n\ndef parse_and_save(url):\n\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.find('title').text\n    save_to_database(url, title)\n\n\ndef main(urls):\n\n    threads = []\n    for url in urls:\n        thread = Thread(target=parse_and_save, args=(url,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    urls =  [\n    f'https://mybooklist.ru/list/{random.randint(100, 1000)}' for _ in range(5)\n    ]\n    main(urls)\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    with open('times.txt', 'a') as f:\n        f.write(f\"Tread: {execution_time}\\n\")\n</code></pre>"},{"location":"lab2/task-2/#multiprocess","title":"multiprocess","text":"<pre><code>from multiprocessing import Pool\nimport requests\nfrom bs4 import BeautifulSoup\nimport psycopg2\nimport time\nfrom dotenv import load_dotenv\nimport os\nimport random\n\nload_dotenv()\n\ndef save_to_database(url, title):\n    db_url = os.getenv(\"DB_URL\")\n    conn = psycopg2.connect(db_url)\n    curs = conn.cursor()\n\n    curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title))\n    conn.commit()\n\n    curs.close()\n    conn.close()\n\n\ndef parse_and_save(url):\n\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.find('title').text\n    save_to_database(url, title)\n\ndef main(urls):\n    num_process = len(urls) if len(urls) &lt; 4 else 4\n    pool = Pool(processes=num_process)\n    pool.map(parse_and_save, urls)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    urls =  [\n    f'https://mybooklist.ru/list/{random.randint(100, 1000)}' for _ in range(5)\n    ]\n    main(urls)\n    end_time = time.time()\n    execution_time = end_time - start_time\n\n    with open('times.txt', 'a') as f:\n        f.write(f\"Multiprocess: {execution_time}\\n\")\n</code></pre>"},{"location":"lab2/task-2/#async","title":"async","text":"<pre><code>\nimport aiohttp\nimport asyncio\nimport asyncpg\nfrom bs4 import BeautifulSoup\nimport time\nfrom dotenv import load_dotenv\nimport random\nload_dotenv()\n\n\nasync def save_to_db(data):\n    conn = await asyncpg.connect(os.getenv(\"DB_URL\"))\n    try:\n        await conn.execute(\n            \"INSERT INTO parce (url, title, process_type) VALUES ($1, $2, $3)\",\n            data['url'],  data['title'], 'async'\n        )\n    finally:\n        await conn.close()\n\n\nasync def parse_and_save(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            html = await response.text()\n        soup = BeautifulSoup(html, 'html.parser')\n        title = soup.find('title').text\n        await save_to_db({'url': url, 'title': title})\n\n\nasync def main(urls):\n    tasks = []\n    for url in urls:\n        task = asyncio.create_task(parse_and_save(url))\n        tasks.append(task)\n    await asyncio.gather(*tasks)\n\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    urls =  [\n    f'https://mybooklist.ru/list/{random.randint(100, 1000)}' for _ in range(5)\n    ]\n    asyncio.run(main(urls))\n    end_time = time.time()\n    execution_time = end_time - start_time\n    with open('times.txt', 'a') as f:\n        f.write(f\"Async: {execution_time}\\n\")\n</code></pre>"},{"location":"lab2/task-2/#_2","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u043c\u0435\u0440\u043e\u0432","text":"<pre><code>| Solution      | Time (seconds)     |\n|---------------|--------------------|\n| Async         | 1.2993099689483643 |\n| Multiprocess  | 1.6727426052093506 |\n| Threading     | 1.244816780090332  |\n\n</code></pre>"},{"location":"lab3/celery/","title":"\u0421\u0435\u0440\u0432\u0438\u0441 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430","text":""},{"location":"lab3/celery/#celery-function","title":"celery function","text":"<pre><code>import threading\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nfrom db import Parce\nfrom celery import Celery\n\ncelery_app = Celery(\n    \"worker\",\n    broker=\"redis://redis:6379/0\",\n    backend=\"redis://redis:6379/0\",\n)\n\ncelery_app.conf.update(\n    task_routes={\n        \"parse.parse_and_save\": \"main-queue\",\n    },\n)\n\n\n@celery_app.task\ndef parse_and_save(url,  session):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    title = soup.title.string if soup.title else 'No title'\n\n    new_article = Parce(\n        url = url,\n        article_title = title\n    )\n\n    session.add(new_article)\n    session.commit()\n\n</code></pre>"},{"location":"lab3/docker/","title":"\u0414\u043e\u043a\u0435\u0440","text":"<pre><code>FROM python:3.10-alpine3.19\n\nWORKDIR /lab_1\n\nCOPY . .\nRUN pip3 install -r requirements.txt\n\nCMD uvicorn main:app --host localhost --port 8000\n</code></pre> <pre><code>version: '3.10'\nservices:\n\n  taskmanager:\n    container_name: lab_1\n    build:\n      context: ./lab_1\n    env_file: .env\n    depends_on:\n      - db\n    ports:\n      - \"8000:8000\"\n    command: uvicorn main:app --host 0.0.0.0 --port 8000\n    networks:\n      - backend_3\n    restart: always\n\n  lab_2:\n    container_name: lab_2\n    build:\n      context: ./lab_2\n    env_file: .env\n    restart: always\n    ports:\n      - \"8001:8001\"\n    command: uvicorn main:app --host 0.0.0.0 --port 8001\n    depends_on:\n      - redis\n      - db\n    networks:\n      - backend_3\n\n  celery_start:\n    build:\n      context: ./lab_2\n    container_name: celery_start\n    command: celery -A celery_start worker --loglevel=info\n    restart: always\n    depends_on:\n      - redis\n      - lab_2\n      - db\n    networks:\n      - backend_3\n\n  redis:\n    image: redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - backend_3\n    depends_on:\n      - db\n\n  db:\n    image: postgres\n    restart: always\n    environment:\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=test_db\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    ports:\n      - \"5432:5432\"\n    networks:\n      - backend_3\n\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  backend_3:\n     driver: bridge\n</code></pre>"}]}